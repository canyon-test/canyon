name: Build and Publish Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
  release:
    types: [created, published]
    tags:
      - 'v*'

jobs:
  build-multi:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: linux-binary
            exe_suffix: ""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rust-src, rustc-dev, llvm-tools-preview

      - name: Install MUSL tools (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/canyon_uploader${{ matrix.exe_suffix }}

  publish:
    needs: build-multi
    runs-on: ubuntu-latest
    # 仅在 release 事件下运行，避免其他触发条件下执行
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      # 分别下载各个平台构建的 artifact 到指定目录
      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-binary
          path: release_artifacts
#      - name: Download macos artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: macos-binary
#          path: release_artifacts
#      - name: Download windows artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: windows-binary
#          path: release_artifacts

      # 创建 Release，此处 tag 由打标签触发时传入（例如 v1.0.0）
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Release built via GitHub Actions"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 列出 release_artifacts 目录内容
        run: |
          echo "列出 release_artifacts 目录内容："
          ls -l release_artifacts


      # 上传各平台产物到 Release 页面
      - name: Upload linux release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/canyon_uploader
          asset_name: linux-binary
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}